// Entity Managing Code
// By Zaratustra (http://hello.to/the.prophet)

#define DUP          1000
#define DLEFT        1270
#define DDOWN        1180
#define DRIGHT       190

#define WALK            1
#define FLY             2
#define EDGEPAUSE       4
#define HESITATE        8


#define enemylayer 1
#define entity_tile 200
#define entities    100

int enemytype[100], entity.dir[100];
int entity.x100[100], entity.y100[100];
int entity.xspeed[100], entity.yspeed[100];
int entity.xsize[100], entity.ysize[100];
int entity.pause[100], entity.var[100], entity.eval[100];
int entity.hurt[100], entity.respawn[100];


void Z_ProcessCreatures()
{
 int i, j, k, x, y;

 for (j=0; j<numents; j++)
  {
    if (j!=player)
    {
     if (entity.respawn[j]) { entity.respawn[j]--;
     if (entity.respawn[j]<100) entity.visible[j]=entity.respawn[j]/4%2;
     if (entity.respawn[j]=0) entity.visible[j]=1;}
     else
     {
      if (    entity.x[j]>xWin-160 && entity.x[j]<xWin+480
           && entity.y[j]>yWin-100 && entity.y[j]<yWin+300 )
     {
     switch (enemytype[j])
      {
       case 0:
        if (entity.x[j]>XWin-16 && entity.x[j]<XWin+336 && entity.y[j]>YWin-16 && entity.y[j]<YWin+216) Z_CheckEnemy(j);
        if (entity.eval[j]=1) Z_CheckEnemy(j);

       case 1: // Bat

        EntityMovement(j, FLY, 200, 0, 16, 16);
        EntityFrame(j,0,0,0,0,5,2);

        CheckCollision(j,16,16);
        if (entity.hurt[j]) KaPow(j,75,0);


       case 2: // Toad

        if (entity.x[player]<entity.x[j]) entity.dir[j]=DLEFT;
                                     else entity.dir[j]=DRIGHT;

        if (entity.var[j]) EntityFrame(j,0,0,3,1,25,1);
                            else EntityFrame(j,0,0,2,0,25,1);

        if (entity.pause[j]) { entity.pause[j]--; }
        if (entity.pause[j]=0 && entity.var[j]=0) { entity.yspeed[j]=0-500; entity.var[j]=1; }
        if (entity.var[j]) { entity.y100[j]+=entity.yspeed[j]; entity.yspeed[j]+=GRAVITY; }


       if (GetTilePixel(entity.x100[j]/100+8,entity.y100[j]/100,obslayer))
        {
         if (entity.yspeed[j]<0) { entity.yspeed[j]=0; } 
        }

       if (GetTilePixel(entity.x100[j]/100+8,entity.y100[j]/100+16,obslayer) && entity.var[j]=1)
        {
         entity.pause[j]=30; entity.var[j]=0; entity.yspeed[j]=0;
        }
        entity.x[j]=entity.x100[j]/100;
        entity.y[j]=entity.y100[j]/100;

        CheckCollision(j,16,16);

        if (entity.hurt[j]) KaPow(j,75,0);

       case 3: // Spider

        EntityMovement(j, FLY, 0, 200, 16, 16);
        EntityFrame(j,0,0,0,0,5,2);

        CheckCollision(j,16,16);
        if (entity.hurt[j]) KaPow(j,100,0);

       case 4: // Moth

        entity.var[j]++;
        entity.y100[j]+=sin(entity.var[j]*12%360)*150>>16;
        SlideOff (j,16,16);

        EntityMovement(j, FLY, 100, 0, 16, 16);
        EntityFrame(j,0,0,0,0,5,2);


        CheckCollision(j,16,16);
        if (entity.hurt[j]) KaPow(j,50,0);

       case 5: // Bot
        EntityMovement(j, WALK, 250, 0, 16, 16);
        EntityFrame(j,0,0,0,0,5,4);

        CheckCollision(j,16,16);
        if (entity.hurt[j]) KaPow(j,150,0);

       }
      }
     }
    }
  }
  Log("end of loop");
}

// --------------------------------------------------------------------------

// Moves entity

void EntityMovement (int ent, int ai, int hspd, int vspd, int xs, int ys)
{
 int v;

 if (!entity.dir[ent]) // Sets starting direction
  {
   if (vspd) { if (entity.y[ent]<yWin+100) { entity.dir[ent]=DDOWN; } else { entity.dir[ent]=DUP; } }
   if (hspd) { if (entity.x[ent]<xWin+160) { entity.dir[ent]=DRIGHT; } else { entity.dir[ent]=DLEFT; } }
  }

 if (hspd) // If entity moves left & right
  {
   if (GetTilePixel(entity.x[ent]-(hspd/100),entity.y[ent]+ys-1,obslayer)!=0 && entity.dir[ent]=DLEFT)     { entity.dir[ent]=DRIGHT; if (ai & EDGEPAUSE) entity.pause[ent]=50; }
   if (GetTilePixel(entity.x[ent]-(hspd/100),entity.y[ent]+1,obslayer)!=0    && entity.dir[ent]=DLEFT)     { entity.dir[ent]=DRIGHT; if (ai & EDGEPAUSE) entity.pause[ent]=50; }
   if (GetTilePixel(entity.x[ent]+xs+(hspd/100),entity.y[ent]+ys-1,obslayer)!=0 && entity.dir[ent]=DRIGHT) { entity.dir[ent]=DLEFT;  if (ai & EDGEPAUSE) entity.pause[ent]=50; }
   if (GetTilePixel(entity.x[ent]+xs+(hspd/100),entity.y[ent]+1,obslayer)!=0    && entity.dir[ent]=DRIGHT) { entity.dir[ent]=DLEFT;  if (ai & EDGEPAUSE) entity.pause[ent]=50; }

   if (GetTilePixel(entity.x[ent]-hspd,entity.y[ent]+ys-1,obslayer)!=0 && GetTilePixel(entity.x[ent]+xs+hspd,entity.y[ent]+ys-1,obslayer)=1) { entity.pause[ent]=50; }

  }
 if (vspd && !hspd) // If entity moves up & down
  {
   if (GetTilePixel(entity.x[ent],entity.y[ent]-(vspd/100),obslayer))    entity.dir[ent]=DDOWN;
   if (GetTilePixel(entity.x[ent]+(hspd/100),entity.y[ent]+ys+(vspd/100),obslayer)) entity.dir[ent]=DUP;
  }

 if (ai & WALK) 
  {
   if (hspd !=0 && vspd = 0) // Entity won't fall: watches out for pits
    {
     if (GetTilePixel(entity.x[ent]-(hspd/100)   ,entity.y[ent]+ys,obslayer)=0 && entity.dir[ent]=DLEFT)  { entity.dir[ent]=DRIGHT; }
     if (GetTilePixel(entity.x[ent]+xs+(hspd/100),entity.y[ent]+ys,obslayer)=0 && entity.dir[ent]=DRIGHT) { entity.dir[ent]=DLEFT;  }
    }
   v=vspd;
   if (v<=0) v=200;
   // Kamikaze!
   if (GetTilePixel(entity.x[ent]+(xs/2),(entity.y100[ent]+entity.yspeed[ent])/100+ys,obslayer)=0)
   { if ( entity.yspeed[ent] < v) entity.yspeed[ent]+=GRAVITY; entity.y100[ent]+=entity.yspeed[ent]; }
   else { entity.yspeed[ent]=0; }
  }

 if (entity.pause[ent]>0) entity.pause[ent]--;

 if (entity.pause[ent]=0)
  {
   switch (entity.dir[ent])
   {
   case DDOWN:  entity.y100[ent]+=vspd;
   case DUP:    entity.y100[ent]-=vspd;
   case DRIGHT: entity.x100[ent]+=hspd;
   case DLEFT:  entity.x100[ent]-=hspd;
  }
 }
 entity.x[ent]=entity.x100[ent]/100;
 entity.y[ent]=entity.y100[ent]/100;
}


// Updates entity ENT's frame to FU, FD, FL or FR plus, according FT interval, FN frames.
void EntityFrame (int ent, int fu, int fd, int fl, int fr, int ft, int fn)
{
 if(entity.pause[ent]=0)
 {
 switch (entity.dir[ent])
  {
   case DDOWN:  entity.specframe[ent]=counter/ft%fn+fd;
   case DUP:    entity.specframe[ent]=counter/ft%fn+fu;
   case DRIGHT: entity.specframe[ent]=counter/ft%fn+fr;
   case DLEFT:  entity.specframe[ent]=counter/ft%fn+fl;
  }
 }
 else
 {
 switch (entity.dir[ent])
  {
   case DDOWN:  entity.specframe[ent]=fd;
   case DUP:    entity.specframe[ent]=fu;
   case DRIGHT: entity.specframe[ent]=fr;
   case DLEFT:  entity.specframe[ent]=fl;
  }
 }
}


void Kapow(int ent, int xs, int ys)
{
//   SpawnObject(entity.x[ent]+(xs/2),entity.y[ent]+(ys/2),1,13,15);
   entity.hurt[ent]=0;
   entity.respawn[ent]=500;
   entity.visible[ent]=0;
   score+=xs;
}


// Checks if player just hit the entity
void CheckCollision (int ent, int xs, int ys)
{
 if ( entity.x[player]+PWIDTH>entity.x[ent] &&
      entity.x[player]<entity.x[ent]+xs &&
      entity.y[player]+PHEIGHT>entity.y[ent]+(vspeed/100)+5 &&
      entity.y[player]<entity.y[ent]+ys )
  {
    Hurt();
    Kapow(ent, 0, 0);
  }
}

int Collision (int ent, int xs, int ys)
{
 if ( entity.x[player]+PWIDTH>entity.x[ent] &&
      entity.x[player]<entity.x[ent]+xs &&
      entity.y[player]+PHEIGHT>entity.y[ent]+(vspeed/100) &&
      entity.y[player]<entity.y[ent]+ys  )
  return 1; else return 0;
}

void Hurt()
{
 oxygen-=60*50;
 playsound(snd_weird,64,128);
}

// Temporary fixture...
void Z_CheckEnemy(int i)
{
 int e,i,j;
 enemytype[i]=GetTile(entity.x[i]/16,entity.y[i]/16,enemylayer)-entity_tile;
 SetTile(entity.x[i]/16,entity.y[i]/16,enemylayer,0);
 entity.dir[i]=0;
 entity.x100[i]=entity.x[i]*100;
 entity.y100[i]=entity.y[i]*100;
}             

void Z_ResetEntities()
{
 int i;
 for(i=1;i<100;i++)
  {
   enemytype[i]=0;
   entity.dir[i]=0;
   entity.pause[i]=0;
   entity.var[i]=0;
   entity.eval[i]=0;
   entity.hurt[i]=0;
   entity.movecode[i]=0;
   entity.xspeed[i]=0;
   entity.yspeed[i]=0;
  }
}

// Sweeps map for enemies that have no entities assigned
void Z_EntitySweep(int z)
{
 int x,y,i,e;
 for (y=1; y<map_height; y++)
  {
   for (x=1; x<map_width; x++)
    {
     If (GetTile(x,y,z) > entity_tile && GetTile(x,y,z) < entity_tile + entities)
      {
       e=0;
       for(i=1; i<=numents; i++)
        {
         if (entity.tx[i]=x && entity.ty[i]=y) e=i;
        }
       if(e=0)
        {
         Switch(GetTile(x,y,z)-entity_tile)
          {


           case 1:   e = EntitySpawn(x,y,"BAT.CHR"); 
           case 2:   e = EntitySpawn(x,y,"FROG.CHR"); 
           case 3:   e = EntitySpawn(x,y,"SPIDER.CHR"); 
           case 4:   e = EntitySpawn(x,y,"MOTH.CHR"); 
           case 5:   e = EntitySpawn(x,y,"BOT.CHR"); 
          }                                     
        }
      }
    }
  }
}

int InScreen (int ent, int rng)
{
 int x;
 x=0;
 if (entity.x[ent]>xWin-rng && entity.x[ent]<xWin+320+rng) x=1;
 if (entity.y[ent]>yWin-rng && entity.y[ent]<yWin+200+rng) x=1;
 return x;
}

void SlideOff (int e, int xs, int ys)
{
 While(GetTilePixel((entity.x100[e]/100),entity.y100[e]/100+(ys/2),obslayer))    { entity.x100[e]=entity.x100[e]+100/100*100; }
 While(GetTilePixel((entity.x100[e]/100)+xs,entity.y100[e]/100+(ys/2),obslayer)) { entity.x100[e]=entity.x100[e]-100/100*100; }
 While(GetTilePixel((entity.x100[e]/100)+(xs/2),entity.y100[e]/100,obslayer))    { entity.y100[e]=entity.y100[e]+100/100*100; }
 While(GetTilePixel((entity.x100[e]/100)+(xs/2),entity.y100[e]/100+ys,obslayer)) { entity.y100[e]=entity.y100[e]-100/100*100; }
}
