#define MAXFISH 100
#define FISHLAYER 4
#define SMELLLAYER 5
#define FISHSPEED 1
#define SHARKSPEED 2
#define FISHERSPEED 2
#define LIVEBONUS 5000

int fishes, fish[MAXFISH], fishx[MAXFISH], fishy[MAXFISH], fishd[MAXFISH], fishm[MAXFISH];

int xw1,yw1,xw2,yw2;
int caca;

int playerx, playery, fisherx, fishery;

int score, lives, lscore, counter, eatscore;
int fishtotal, game;
int timer2;
int fade;

int going, goframe, wannago;

void SharkLoop()
{
 int done, l, i;
 cameratracking=0;
 timer2=timer;

 for (i=0; i<4; i++)
 {
  fisher[i]=0;
  fishergo[i]=0;
  fisherow[i]=0;
  fisherspawn[i]=0;
 }
 going=0; wannago=0; counter=0;
 if (scrbuf) { free(scrbuf); scrbuf=0; }


 SetPlayer(entitySpawn(playerx,playery,"SHARK.CHR"));
 fade=1;
 game=0;
 while(!game)
 {
  while (timer2<timer)
  {
  ProcessEntities();
//  Log("shark");
  if (lives>0)
  {
   SharkMove();
   FisherMove();
  }
  else
  { entity.specframe[player]=40;
    UpdateControls();
    if (b1||b2||b3||b4) game=2; }
//  Log("fish");
  FishMove();
//  Log("fisher");
//  Log("Ohkay");
  counter++;
  timer2+=2;
  }

  if (score>lscore) { lives++; lscore+=LIVEBONUS; }

  while(timer<timer2)
  {
  xwin=entity.x[player]-152;
  ywin=entity.y[player]-100;
  if (xwin>xw2) xwin=xw2;
  if (ywin>yw2) ywin=yw2;
  if (xwin<xw1) xwin=xw1;
  if (ywin<yw1) ywin=yw1;
  Render();
  RectFill(0,0,320,15,36);
  GotoXY(2,2); PrintString(0,right(str(1000000+score),6));
//  GotoXY(162,2); PrintString(0,right(str(100+lives),2));
  for (l=0; l<=lives; l++)
   {
    TCopySprite(320-(l*16),0,16,16,vsp+(70*256));
   }
  if (lives=0) JigglyText(120,95,"Game Over");
  ShowPage();
  if (fade) { FadeIn(100); fade=0; timer2=timer; }
  }
 }
}

void LoseLife()
{
 int i;
  PlaySound(sound[1],127,128);
  FadeOut(100);
  fade=1;
  entity.x[player]=playerx*16;
  entity.y[player]=playery*16;
  entity.tx[player]=playerx;
  entity.ty[player]=playery;
  going=0; wannago=0;
 for (i=0;i<4;i++)
 {
  if (fisher[i]) { entity.x[fisher[i]]=-65536; fisherspawn[i]=i*250+100; }
 }
 lives--;
 timer2=timer;
}

void SharkMove()
{
 int x,y,i;
 UpdateControls();
 if (up)    wannago=1;
 if (right) wannago=2;
 if (down)  wannago=3;
 if (left)  wannago=4;
 x=entity.x[player]; y=entity.y[player];

 if (GetTile(x+8/16,y+8/16,2)=60)
 {
  SetTile(x+8/16,y+8/16,2,0);
  for (i=0; i<4; i++)
  {
   if (fisher[i]) fisherow[i]=500;
  }
  PlaySound(sound[0],127,128);
  eatscore=100;
 }

 switch(going)
  {
   case 1: y-=SHARKSPEED; if (GetTile(x/16,y-SHARKSPEED/16,6)) going=0;
   case 2: x+=SHARKSPEED; if (GetTile(x+15+SHARKSPEED/16,y/16,6)) going=0;
   case 3: y+=SHARKSPEED; if (GetTile(x/16,y+15+SHARKSPEED/16,6)) going=0;
   case 4: x-=SHARKSPEED; if (GetTile(x-SHARKSPEED/16,y/16,6)) going=0;
  }
 if (x%16=0 && y%16=0)
  {
   switch(wannago)
    {
     case 1: if (!GetTile(x/16,y/16-1,6)) going=1;
     case 2: if (!GetTile(x/16+1,y/16,6)) going=2;
     case 3: if (!GetTile(x/16,y/16+1,6)) going=3;
     case 4: if (!GetTile(x/16-1,y/16,6)) going=4;
    }
   SetTile(x/16,y/16,SMELLLAYER,going);
  }
 if (going) goframe=going;
 if (!goframe) goframe=2;
 entity.x[player]=x; entity.y[player]=y;
 entity.specframe[player]=(goframe*4);
 if (going) entity.specframe[player]+=(timer/10%4);
 //caca=(going*4)+(x/4%4)+(y/4%4);
}

void MakeWall(int l)
{
 int x,y,t,a;
 xw1=map_width*16;
 yw1=map_height*16;
 xw2=0;
 yw2=0;

 for (x=0; x<=map_width; x++)
  {
   for (y=0; y<=map_height; y++)
    {
     a=0;
     t=GetTile(x,y,l)/20*20;
     if (t>0)
     {
     if (y>0          && GetTile(x,y-1,l)>=t && GetTile(x,y-1,l)<=t+15) a=a|1;
     if (x<map_width  && GetTile(x+1,y,l)>=t && GetTile(x+1,y,l)<=t+15) a=a|2;
     if (y<map_height && GetTile(x,y+1,l)>=t && GetTile(x,y+1,l)<=t+15) a=a|4;
     if (x>0          && GetTile(x-1,y,l)>=t && GetTile(x-1,y,l)<=t+15) a=a|8;
     SetTile(x,y,l,t+a);
     SetTile(x,y,6,1);
      if (xw1>x*16-8)  xw1=x*16-8;
      if (yw1>y*16-8)  yw1=y*16-8;
      if (xw2<x*16+24) xw2=x*16+24;
      if (yw2<y*16+24) yw2=y*16+24;
     }
    }
  }
 xw2-=320;
 yw2-=200;
 yw1-=16;
 Log(str(xw1)+" "+str(yw1)+" "+str(xw2)+" "+str(yw2));
//  OutputImage();
}


void MakeFish(int l)
{
 int x,y,t,a;
     a=0;
 fishtotal=0;
 for (x=0; x<=map_width; x++)
  {
   for (y=0; y<=map_height; y++)
    {
     t=GetTile(x,y,l);
     if (t=80)
      {fishx[a]=x*16; fishy[a]=y*16;a++; 
       SetTile(x,y,l,0); SetTile(x,y,FISHLAYER,1);
       fish[a]=1;

       fishd[a]=0; fishm[a]=0;
      }
    }
 }
 fishes=a; fishtotal=a-1;
}

void FishRender()
{
 int i, t;
 t=timer/20%2;
 for (i=0; i<fishes; i++)
 {
  if (fish[i]) TCopySprite(fishx[i]-xWin, fishy[i]-yWin, 16,16,vsp+(80+(fishd[i]*2+t)*256));
 }
}

void FishMove()
{
 int s,d;
 for (s=0;s<fishes;s++)
  {
   if (fish[s])
   {
   if (fishx[s]-entity.x[player]>-4 && fishx[s]-entity.x[player]<4
    && fishy[s]-entity.y[player]>-4 && fishy[s]-entity.y[player]<4)
    {
     SetTile(fishx[s]/16,fishy[s]/16,FISHLAYER,0);
     fish[s]=0;
     score+=50; fishtotal--;
     if (fishtotal=0) game=1;
     PlaySound(sound[4],127,128);
    }
   if (fishm[s]<=0)
    {
     fishx[s]=fishx[s]+8/16*16;
     fishy[s]=fishy[s]+8/16*16;
     SetTile(fishx[s]/16,fishy[s]/16,FISHLAYER,0);
     d=random(5);
     while (FishTile(fishx[s]/16,fishy[s]/16,d)>=1) { d=random(5); }
     fishd[s]=d;
     switch(fishd[s])
      {
       case 0: SetTile(fishx[s]/16,fishy[s]/16,FISHLAYER,1);
       case 1: SetTile(fishx[s]/16,fishy[s]/16-1,FISHLAYER,1);
       case 2: SetTile(fishx[s]/16+1,fishy[s]/16,FISHLAYER,1);
       case 3: SetTile(fishx[s]/16,fishy[s]/16+1,FISHLAYER,1);
       case 4: SetTile(fishx[s]/16-1,fishy[s]/16,FISHLAYER,1);
      }
     fishm[s]=16;
    }
   else
    {
     switch(fishd[s])
      {
       case 1: fishy[s]-=FISHSPEED;
       case 2: fishx[s]+=FISHSPEED;
       case 3: fishy[s]+=FISHSPEED;
       case 4: fishx[s]-=FISHSPEED;
      }
     fishm[s]-=FISHSPEED;
    }
   }
  }
}

int FishTile(int x, int y, int d)
{
  switch (d)
  {
   case 0: va= GetTile(x,y,6)   + GetTile(x,y,FISHLAYER);
   case 1: va= GetTile(x,y-1,6) + GetTile(x,y-1,FISHLAYER);
   case 2: va= GetTile(x+1,y,6) + GetTile(x+1,y,FISHLAYER);
   case 3: va= GetTile(x,y+1,6) + GetTile(x,y+1,FISHLAYER);
   case 4: va= GetTile(x-1,y,6) + GetTile(x-1,y,FISHLAYER);
  }
 return va;
}

int fisher[4], fishergo[4], fisherframe[4], fisherow[4], fisherspawn[4];


void FisherMove()
{
 int i,x,y,d,f;
 for (i=0; i<4; i++)
  {
   if (counter>250*i+100 && !fisher[i])
    { fisher[i]=EntitySpawn(fisherx,fishery,"FISHER"+str(i+1)+".CHR"); fishergo[i]=3;
      PlaySound(sound[6],64,128); fisherow[i]=0;
    }
   if (fisherspawn[i])
   {
    fisherspawn[i]--;
    if (!fisherspawn[i])
     { entity.x[fisher[i]]=fisherx*16;
       entity.y[fisher[i]]=fishery*16;
       fishergo[i]=3; fisherow[i]=0;
       PlaySound(sound[6],64,128);
     }
   }
   else
   if (fisher[i])
   {

    x=entity.x[fisher[i]]; y=entity.y[fisher[i]]; d=fishergo[i];


   if (x-entity.x[player]>-4 && x-entity.x[player]<4
    && y-entity.y[player]>-4 && y-entity.y[player]<4)
     {
      if (fisherow[i])
       { entity.x[fisher[i]]=-65536;
         fisherspawn[i]=300; fisherow[i]=0;
         PlaySound(sound[9+random(3)],64,128);
         score+=eatscore; eatscore=eatscore*2; }
      else
       {
        LoseLife();
       }
     }
    else
    {

    switch(fishergo[i])
     {
      case 1: y-=FISHERSPEED; if (GetTile(x/16,y-FISHERSPEED/16,6))    fishergo[i]=0; fisherframe[i]=3;
      case 2: x+=FISHERSPEED; if (GetTile(x+15+FISHERSPEED/16,y/16,6)) fishergo[i]=0; fisherframe[i]=1;
      case 3: y+=FISHERSPEED; if (GetTile(x/16,y+15+FISHERSPEED/16,6)) fishergo[i]=0; fisherframe[i]=2;
      case 4: x-=FISHERSPEED; if (GetTile(x-FISHERSPEED/16,y/16,6))    fishergo[i]=0; fisherframe[i]=0;
     }
    if (x%16=0 && y%16=0 && Exits(x/16,y/16)>2) fishergo[i]=0;
    if (fishergo[i]=0)
     { x=x+8/16*16; y=y+8/16*16;
       entity.x[fisher[i]]=x; entity.y[fisher[i]]=y;
       fishergo[i]=FisherAi(i,d); }
    entity.x[fisher[i]]=x; entity.y[fisher[i]]=y;
    f=fisherframe[i];
    if (fisherow[i]) { fisherow[i]--; f=f+4; }
    entity.specframe[fisher[i]]=(f*4)+(timer/10%4);
    }
   }
  }
}


int Exits (int x, int y)
{
 return 4-GetTile(x-1,y,6)-GetTile(x+1,y,6)-GetTile(x,y-1,6)-GetTile(x,y+1,6);
}

int FisherAI(int f, int dir)
{
 int x,y,u,d,l,r,xp,yp,fr;
 x=entity.x[fisher[f]]/16; y=entity.y[fisher[f]]/16;
 xp=entity.x[player]/16;   yp=entity.y[player]/16;
 fr=0;
 u=random(8); d=random(8); l=random(8); r=random(8);
 switch(f)
 {
  case 0: // Bellow
   u+=random(6); r+=random(6); d+=random(6); l+=random(6);
  case 1: // Bullseye
   if (x=xp)
    { if (y<yp) d+=15-(yp-y);
           else u+=15-(y-yp); }
   if (y=yp)
    { if (x<xp) r+=15-(xp-x);
           else l+=15-(x-xp); }
  case 2: // Earwax
    if (y<yp) d+=10-(yp-y);
         else u+=10-(y-yp); 
    if (x<xp) r+=10-(xp-x);
         else l+=10-(x-xp); 
  case 3: // Nosey
   u+=random(12); r+=random(12); d+=random(12); l+=random(12);
   if (GetTile(x,y,SMELLLAYER) && random(3))
    { u=0; d=0; l=0; r=0; fr=GetTile(x,y,SMELLLAYER); }
 }
 if (fisherow[f])
  {
   l=50-l; r=50-r; u=50-u; d=50-d;
  }
 switch(dir)
 {
  case 1: u+=5;
  case 2: r+=5;
  case 3: d+=5;
  case 4: l+=5;
 }
 if (GetTile(x-1,y,6) || l<0) l=0;
 if (GetTile(x+1,y,6) || r<0) r=0;
 if (GetTile(x,y-1,6) || u<0) u=0;
 if (GetTile(x,y+1,6) || d<0) d=0;
 if (u>l && u>r && u>d) fr=1;
 if (r>u && r>l && r>d) fr=2;
 if (d>u && d>l && d>r) fr=3;
 if (l>u && l>r && l>d) fr=4;
 return fr;
}
