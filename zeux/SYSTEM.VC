// ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
// ³ File: system.vc                                                         ³
// ³ Author: vecna                                                           ³
// ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

// ================================= Data ====================================


int system_initialized;               // V1 Compatibility lib initialized
int textbox;                          // Text box image pointer
int speechpic;                        // Speech portrait buffer
int ptrgfx;

int pcspic[6];

// -- Mapswitch stuff -- //

string current_map;
int gotox, gotoy;

// -- Temporary variable thingies. -- //

int volatile;           // never assume this has any set value between routines
int i, done;            // generic done flag for loops


int snd_coin, snd_gem, snd_ow[5], snd_argh, snd_life, snd_stage, snd_fall;
int snd_spec, snd_prize, snd_pop, snd_bells, snd_boing, snd_tsubaba;
int snd_rayden, snd_finish, snd_toasty, snd_die, snd_metroid, snd_rise;
int snd_bounce, snd_search, snd_poke, snd_shoot, snd_tport, snd_boom;
int snd_charge, snd_laser;

// ================================= Code ====================================

void AutoExec()
{
 AllowConsole(0);
 map("title.map");
// map("fin2.map");
}

void SystemStartup()
{
  if (system_initialized) return;

  PaletteMorph(0,0,0,0,63);
  if (LoadFont("zeux.fnt") != 1)
     Exit("Could not get TEXT.FNT in appropriate slot.");

  snd_coin=CacheSound("PING2.WAV");
  snd_gem=CacheSound("PINGBIG.WAV");
  snd_ow[0]=CacheSound("YELLING.WAV");
  snd_ow[1]=CacheSound("PAIN2.WAV");
  snd_ow[2]=CacheSound("PAIN3.WAV");
  snd_ow[3]=CacheSound("PAIN4.WAV");
  snd_ow[4]=CacheSound("HUMANITY.WAV");
  snd_argh=CacheSound("SCREAMM2.WAV");
  snd_life=CacheSound("BELLPEAL.WAV");
  snd_spec=CacheSound("ARABIAN.WAV");
  snd_prize=CacheSound("PRIZE1.WAV");
  snd_pop=CacheSound("POP.WAV");
  snd_bells=CacheSound("BELL1.WAV");
  snd_boing=CacheSound("BOING.WAV");
  snd_tsubaba=CacheSound("TSUBABA.WAV");
  snd_rayden=CacheSound("RAYDEN.WAV");
  snd_toasty=CacheSound("TOASTY.WAV");
  snd_finish=CacheSound("FINISH.WAV");
  snd_die=CacheSound("PACDIES.WAV");
  snd_metroid=CacheSound("METROID2.WAV");
  snd_rise=CacheSound("RISEGRAV.WAV");
  snd_fall=CacheSound("FALLEN.WAV");
  snd_bounce=CacheSound("BOING2.WAV");
  snd_shoot=CacheSound("SHOT3.WAV");
  snd_search=CacheSound("YEOOHP.WAV");
  snd_poke=CacheSound("POKEMON.WAV");
  snd_tport=CacheSound("TWILIGHT.WAV");
  snd_boom=CacheSound("BOOM.WAV");
  snd_charge=CacheSound("CHARGE.WAV");
  snd_laser=CacheSound("SHOCK.WAV");

  system_initialized=1;
}

void AlterBTile(int x, int y, int value, int obs)
{
  SetTile(x, y, 0, value);
  SetTile(x, y, 6, obs);
}

void AlterFTile(int x, int y, int value, int obs)
{
  SetTile(x, y, 1, value);
  SetTile(x, y, 6, obs);
}

void ChangeZone(int x, int y, int newzone)
{
  SetTile(x,y, 7, newzone);
}


void Wait(int delay)
{
  int i;

  timer=0; i=0;
  while (i<delay)
  {
    while (timer)
    {
      timer--; i++;
      ProcessEntities();
    }
    UpdateControls();
    Render();
    ShowPage();
  }
  timer=0;
}

void FadeOut(int span, int upd)
{
  int n, k, t;
  t=timer;
  n=0;
  k=span;
  while (k>0)
  {
    while (timer-t)
    {
      if (upd) ProcessEntities();
      k--;
      t++;
      n++;
    }
    if (upd)
    {
      Render();
      ShowPage();
    }
    if (n>span) n=span;
    if (alterpal) { PaletteAlter(); }
    PaletteMorph(0,0,0,0,63-(n*63/span));
  }
}

void FadeIn(int span, int upd)
{
  int n, k, t;

  t=timer;
  n=0;
  k=span;
  while (k>0)
  {
    while (timer-t)
    {
      if (upd) ProcessEntities();
      k--;
      t++;
      n++;
    }
    if (upd)
    {
      Render();
      ShowPage();
    }
    if (n>span) n=span;
    PaletteMorph(0,0,0,0,n*63/span);
  }
}

void WhiteOut(int span)
{
  int n, k;
  timer=0; n=0; k=span;
  while (k>0)
  {
    while (timer)
    {
      k--;
      timer--;
      n++;
    }
    if (n>span) n=span;
    PaletteMorph(63,63,63,n*100/span,63);
  }
  timer=0;
}

void WhiteIn(int span)
{
  int n, k;
  timer=0; n=0; k=span;
  while (k>0)
  {
    while (timer)
    {
      k--;
      timer--;
      n++;
    }
    if (n>span) n=span;
    PaletteMorph(63,63,63,100-(n*63/span),63);
  }
  PaletteMorph(0,0,0,0,63);
  timer=0;
}

#include "zside.vc"
#include "zspells.vc"
// ------------------ ZSIDE Annexes
#include "zobject.vc"
#include "zentity.vc"
#include "zstuff.vc"
// ------------------
#include "zstatus.vc"
#include "zfx.vc"
#include "zintro.vc"
#include "worldmap.vc"
#include "zboss.vc"
#include "effects.vc"
#include "hamster.vc"

